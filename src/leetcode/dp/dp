dp相关内容：
https://www.zhihu.com/question/39948290
https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=100000768&idx=1&sn=86d496e4a1e65c72cddca36977c61eb4&chksm=1bd7fa082ca0731ebc5021cacfb1def56b4c057f8c6debb79253deac7de9687dfa17a6662fae&scene=18#wechat_redirect

动态规划三要素(其中重叠子问题不是必要条件  另外两个是动态规划问题需要满足的条件 即必要条件
    做题的时候可以先大致判断一下是否符合这三点 当然很多也是靠经验积累
    而不是死套这三点条件 还是要积累一些经典的题目作为基础的动态规划知识储备):
        重叠子问题:动态规划思想出现的起初原因就在这里，即达到聪明穷举的目的 重叠子问题不是必要条件 但是如果该性质无法满足，动态规划算法同其他算法相比就不具备优势
        最优子结构(某些问题的特质 并不是dp问题专有的):也就是可以将问题规模缩小，从局部最值推得出全局最值(总分最高和每一科目最高之间的关系)
        无后效性(即可以写出状态方程或者说可以从dp[0...i-1]推出来dp[i])

第一步要明确两点，「状态」和「选择」
第二步要明确dp数组的定义
第三步，根据「选择」，思考状态转移的逻辑

大致框架(可以结合LongestCommonSubsequence中动态规划方法去理解):
    //其中状态就是dp数组的维数
    for 状态1 in 状态1的所有取值：
        for 状态2 in 状态2的所有取值：
            for ...
                dp[状态1][状态2][...] = 择优(选择1，选择2...)

题目摘要：
    一维dp table:
        1. 零钱兑换 CoinChange: 介绍了暴力递归，带备忘录的递归，以及动态规划的不同解法和区别

        2.1 最长上升子序列 LengthOfLIS:介绍了带备忘录的递归，以及动态规划的不同解法和区别
        2.2 俄罗斯套娃信封问题 MaxEnvelopes:是最长上升子序列问题LengthOfLIS的加强版

        3. 最大子序和MaxSubArray:当dp[i]的含义定义错时无法由dp[0...i-1]推出dp[i]的情况
    二维dp table:
        1. 最长公共子序列LongestCommonSubsequence:介绍了暴力递归，带备忘录的递归，以及动态规划的不同解法和区别