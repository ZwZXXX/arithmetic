暴力递归去求解斐波那契数列问题，MinPath问题等问题理论上是完全可以的，而且代码简洁，
但是由于其存在着大量的重复计算，所以时间复杂度很高
所以我们就要对暴力递归加以改进：把每次暴力递归中某个计算出来的值记录下来，然后下次再遇到的时候就不需要再去重复计算
从前到后对于某一个子问题只去计算一次，从而降低时间复杂度，于是就引来了动态规划这个概念

当使用暴力递归的时候，发现存在大量的重复计算，并且是一个无后效性问题的时候，一定可以使用动态规划去优化

无后效性：
某阶段的状态一旦确定，则此后过程的演变不再受此前各种状态及决策的影响。即未来与过去无关
在暴力递归的MinPath中，一开始如果i = 0,j = 0,不论是先走到i = 1,j = 0的位置再来到i = 1,j = 1的位置
还是先走到i = 0,j = 1的位置再来到i = 1,j = 1的位置上，只要来到了i = 1,j = 1的位置上之后，接下来的问题就变成了
从i=1,j=1位置来到右下角所要的最短路径，和它到底是从i=0,j=1来到的这里还是从i=1,j=0来到的这里没有任何关系，也就是
只要i,j确定了，那么这个结果就一定是确定的，不受之前任何决策的影响。
在暴力递归的Hanoi问题中，就是一个有后效性问题，因为上一步从哪一个棍子上拿下来圆盘，就直接影响了接下来的所有操作，所以这个暴力递归就不可以用动态规划来优化

动态规划(DP)：
若用分治法来解这类问题，则分解得到的子问题数目太多，有些子问题被重复计算了很多次。
如果我们能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，这样就可以避免大量的重复计算，
节省时间。我们可以用一个表来记录所有已解的子问题的答案,(这张表可以是二维的也就是一个矩阵来表示对应关系)，也可以是一维的。
不管该子问题以后是否被用到，
只要它被计算过，就将其结果填入表中。这就是动态规划法的基本思路 就是一种用空间换时间的思路
本质就是：递归+缓存，从暴力递归优化而来，缓存就是各个子问题的解

